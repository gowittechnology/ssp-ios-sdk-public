// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name sspadkit
import AdSupport
import AppTrackingTransparency
import Foundation
import Swift
import SystemConfiguration
import UIKit
import WebKit
@_exported import sspadkit
@_hasMissingDesignatedInitializers public class NetworkService {
  @objc deinit
}
public class SSPAdKitConfig {
  public var yearOfBirth: Swift.Int?
  public var gender: sspadkit.GenderTypes
  public var categories: [Swift.String : Swift.String]
  public var latitude: Swift.String?
  public var longtitude: Swift.String?
  public var customdata: [Swift.String : Swift.String]
  public var applicationVersion: Swift.String?
  public var language: Swift.String?
  final public let inventoryID: Swift.String
  final public let adUnitID: Swift.String
  public var adUnitSize: sspadkit.SSPAdContainerSize?
  public var shouldAskForIDFA: Swift.Bool
  public var addTimeOutInterval: Swift.Int?
  public var interstitial: Swift.Int
  public init(_inventoryID: Swift.String, _adUnitID: Swift.String)
  public var isInventoryIDValid: Swift.Bool {
    get
  }
  public var isAdUnitIDValid: Swift.Bool {
    get
  }
  public func getBannerParams() -> [Swift.String : Any]
  public func getPopUpParams() -> [Swift.String : Any]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SSPBannerAd : ObjectiveC.NSObject, WebKit.WKNavigationDelegate {
  public var addId: Swift.Int?
  final public let addresponse: sspadkit.AddResponse
  public func show(in view: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
public class SSPBannerAdRequest {
  public init(_config: sspadkit.SSPAdKitConfig, _addSize: sspadkit.SSPAdContainerSize, _delegate: sspadkit.BannerAdDelegate, _identifier: Swift.Int? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class SSPPopUpAd : ObjectiveC.NSObject, WebKit.WKNavigationDelegate {
  public var addId: Swift.Int?
  final public let addresponse: sspadkit.AddResponse
  public func show(in view: UIKit.UIView)
  @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc public func closePopUpAction()
  @objc override dynamic public init()
  @objc deinit
}
public class SSPPopUpAdRequest {
  public init(_config: sspadkit.SSPAdKitConfig, _addSize: sspadkit.SSPAdContainerSize, _delegate: sspadkit.PopUpAdDelegate, _identifier: Swift.Int? = nil)
  @objc deinit
}
public struct AddResponse {
}
@_hasMissingDesignatedInitializers public class NetworkHelper {
  public var timeOutInterval: Swift.Int
  @objc deinit
}
public enum SSPBannerSizes : Swift.Int {
  case banner
  case largeBanner
  case mediumRect
  case largeRect
  case fullSize
  case leaderBoard
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SSPPopUpSizes : Swift.Int {
  case small
  case medium
  case big
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SSPRequestResponse : Swift.Int {
  case succes
  case delegateNotImplemented
  case sizeNotAvailableForDevice
  case inventoryIDNotValid
  case addUnitIDNotValid
  public var enumDetails: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SSPResult : Swift.Int {
  case succes = 0
  case networkErrorJson
  case networkRequestFailed
  case networkResponseIsEmpty
  case didntReceiveAnyAdds
  case addViewConstructorError
  case addContainerSizeIsNotCorrect
  public var enumDetails: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GenderTypes : Swift.String {
  case unknown
  case male
  case female
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol BannerAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func addReceived(forBanner adItem: sspadkit.SSPBannerAd)
  @objc func failedToLoadAdd(forBanner adItem: sspadkit.SSPBannerAd, reason: sspadkit.SSPResult)
  @objc optional func addWillAppear(forBanner adItem: sspadkit.SSPBannerAd)
}
@objc public protocol PopUpAdDelegate : ObjectiveC.NSObjectProtocol {
  @objc func addReceived(forPopUp adItem: sspadkit.SSPPopUpAd)
  @objc func failedToLoadAdd(forPopUp adItem: sspadkit.SSPPopUpAd, reason: sspadkit.SSPResult)
  @objc func closePopUp(forPopUp adItem: sspadkit.SSPPopUpAd)
  @objc optional func addWillAppear(forPopUp adItem: sspadkit.SSPPopUpAd)
}
public class SSPAdKit {
  public var config: sspadkit.SSPAdKitConfig
  public var bannerDelegate: sspadkit.BannerAdDelegate?
  public var popUpDelegate: sspadkit.PopUpAdDelegate?
  public init(_config: sspadkit.SSPAdKitConfig)
  public func requestBanner(for _size: sspadkit.SSPBannerSizes, _identifier: Swift.Int? = nil) -> sspadkit.SSPRequestResponse
  public func requestPopup(for _size: sspadkit.SSPPopUpSizes, _identifier: Swift.Int? = nil) -> sspadkit.SSPRequestResponse
  @objc deinit
}
public class SSPAdContainerSize {
  public var isForBanner: Swift.Bool?
  public var popUpSize: sspadkit.SSPPopUpSizes?
  public var bannerSize: sspadkit.SSPBannerSizes?
  public var adUnitWidth: Swift.Int
  public var adUnitHeight: Swift.Int
  public init(_popUpSize: sspadkit.SSPPopUpSizes)
  public init(_bannerSize: sspadkit.SSPBannerSizes)
  @objc deinit
}
extension sspadkit.SSPBannerSizes : Swift.Equatable {}
extension sspadkit.SSPBannerSizes : Swift.Hashable {}
extension sspadkit.SSPBannerSizes : Swift.RawRepresentable {}
extension sspadkit.SSPPopUpSizes : Swift.Equatable {}
extension sspadkit.SSPPopUpSizes : Swift.Hashable {}
extension sspadkit.SSPPopUpSizes : Swift.RawRepresentable {}
extension sspadkit.SSPRequestResponse : Swift.Equatable {}
extension sspadkit.SSPRequestResponse : Swift.Hashable {}
extension sspadkit.SSPRequestResponse : Swift.RawRepresentable {}
extension sspadkit.SSPResult : Swift.Equatable {}
extension sspadkit.SSPResult : Swift.Hashable {}
extension sspadkit.SSPResult : Swift.RawRepresentable {}
extension sspadkit.GenderTypes : Swift.Equatable {}
extension sspadkit.GenderTypes : Swift.Hashable {}
extension sspadkit.GenderTypes : Swift.RawRepresentable {}
